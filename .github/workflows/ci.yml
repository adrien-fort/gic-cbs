name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Pytest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests with coverage
        run: pytest --cov=src --cov-report=xml
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  sonarqube:
    name: SonarQube Static Analysis
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: .
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            -Dsonar.projectKey=adrien-fort_gic-cbs
            -Dsonar.organization=adrien-fort
            -Dsonar.python.coverage.reportPaths=coverage.xml
      - name: SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt

  docs:
    name: Build Sphinx Documentation
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install 'sphinx>=5.0'
      - name: Build Sphinx docs
        run: |
          cd docs
          sphinx-build -b html . _build/html
      - name: Upload Sphinx HTML docs
        uses: actions/upload-artifact@v4
        with:
          name: sphinx-html-docs-${{ github.run_number }}
          path: docs/_build/html

  build-docker:
    name: Build and Save Docker Image
    runs-on: ubuntu-latest
    needs: docs
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: |
          docker build -t gic-cbs:${{ github.run_number }} -t gic-cbs:latest .
      - name: Save Docker image as artifact
        run: |
          docker save gic-cbs:${{ github.run_number }} | gzip > gic-cbs-${{ github.run_number }}.tar.gz
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: gic-cbs-${{ github.run_number }}.tar.gz

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Terraform Import & Apply
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          cd infra
          terraform init
          terraform import -allow-missing-config azurerm_resource_group.gic_cbs /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/gic-cbs-rg || true
          terraform apply -auto-approve

  deploy-aks:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: terraform-apply
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
      - name: Load Docker image
        run: |
          gunzip -c gic-cbs-${{ github.run_number }}.tar.gz | docker load
      - name: Push to Azure Container Registry
        run: |
          az acr login --name $(az acr list --resource-group gic-cbs-rg --query "[0].name" -o tsv)
          ACR_NAME=$(az acr list --resource-group gic-cbs-rg --query "[0].name" -o tsv)
          ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --query "loginServer" -o tsv)
          docker tag gic-cbs:${{ github.run_number }} $ACR_LOGIN_SERVER/gic-cbs:${{ github.run_number }}
          docker push $ACR_LOGIN_SERVER/gic-cbs:${{ github.run_number }}
      - name: Deploy to AKS
        run: |
          ACR_NAME=$(az acr list --resource-group gic-cbs-rg --query "[0].name" -o tsv)
          ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --query "loginServer" -o tsv)
          kubectl set image deployment/gic-cbs gic-cbs=$ACR_LOGIN_SERVER/gic-cbs:${{ github.run_number }} --record
          kubectl rollout status deployment/gic-cbs

  # owasp-zap:
  #   name: OWASP ZAP Scan
  #   runs-on: ubuntu-latest
  #   needs: deploy-aks
  #   steps:
  #     - name: Run OWASP ZAP
  #       run: |
  #         docker run -t owasp/zap2docker-stable zap-baseline.py -t http://<your-app-url>